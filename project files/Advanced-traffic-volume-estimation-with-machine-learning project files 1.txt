{"cells":[{"cell_type":"code","execution_count":13,"id":"330831f0","metadata":{"execution":{"iopub.execute_input":"2024-04-12T16:07:46.506776Z","iopub.status.busy":"2024-04-12T16:07:46.505073Z","iopub.status.idle":"2024-04-12T16:07:49.386352Z","shell.execute_reply":"2024-04-12T16:07:49.385168Z","shell.execute_reply.started":"2024-04-12T16:07:46.506693Z"},"id":"7orIedGckTt8","papermill":{"duration":2.276626,"end_time":"2024-04-12T14:15:58.752302","exception":false,"start_time":"2024-04-12T14:15:56.475676","status":"completed"},"tags":[],"trusted":true},"outputs":[],"source":["import pandas as pd\n","# import matplotlib.pyplot as plt\n","# import seaborn as sns\n","import numpy as np\n","import sklearn\n","from sklearn.linear_model import LinearRegression, Lasso\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import r2_score, mean_squared_error\n","from sklearn.feature_selection import mutual_info_regression, SelectPercentile, SelectKBest, RFE"]},{"cell_type":"markdown","metadata":{"id":"nmmr2_EpuuRL","papermill":{"duration":0.006092,"end_time":"2024-04-12T14:15:58.764951","exception":false,"start_time":"2024-04-12T14:15:58.758859","status":"completed"},"tags":[]},"source":["### Pre-processing"]},{"cell_type":"code","execution_count":14,"id":"6cbb3d32","metadata":{"execution":{"iopub.execute_input":"2024-04-12T16:08:07.460435Z","iopub.status.busy":"2024-04-12T16:08:07.459848Z","iopub.status.idle":"2024-04-12T16:08:07.598046Z","shell.execute_reply":"2024-04-12T16:08:07.596581Z","shell.execute_reply.started":"2024-04-12T16:08:07.460400Z"},"id":"m48BNoQUk9x-","papermill":{"duration":0.130903,"end_time":"2024-04-12T14:15:58.902090","exception":false,"start_time":"2024-04-12T14:15:58.771187","status":"completed"},"tags":[],"trusted":true},"outputs":[],"source":["# Reading the Training Data\n","df = pd.read_csv(\"C:/Users/kvsvy/Downloads/traffic volume data/train_set_dirty.csv\")"]},{"cell_type":"code","execution_count":15,"id":"7c6e6f84","metadata":{"execution":{"iopub.execute_input":"2024-04-12T16:09:37.188915Z","iopub.status.busy":"2024-04-12T16:09:37.188535Z","iopub.status.idle":"2024-04-12T16:09:37.212604Z","shell.execute_reply":"2024-04-12T16:09:37.211749Z","shell.execute_reply.started":"2024-04-12T16:09:37.188884Z"},"papermill":{"duration":0.05819,"end_time":"2024-04-12T14:15:58.966699","exception":false,"start_time":"2024-04-12T14:15:58.908509","status":"completed"},"tags":[],"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 38563 entries, 0 to 38562\n","Data columns (total 9 columns):\n"," #   Column               Non-Null Count  Dtype  \n","---  ------               --------------  -----  \n"," 0   traffic_volume       34748 non-null  float64\n"," 1   holiday              42 non-null     object \n"," 2   temp                 34754 non-null  float64\n"," 3   rain_1h              34860 non-null  float64\n"," 4   snow_1h              34733 non-null  float64\n"," 5   clouds_all           34659 non-null  float64\n"," 6   weather_main         34654 non-null  object \n"," 7   weather_description  34751 non-null  object \n"," 8   date_time            34683 non-null  object \n","dtypes: float64(5), object(4)\n","memory usage: 2.6+ MB\n"]},{"data":{"text/plain":["traffic_volume          3815\n","holiday                38521\n","temp                    3809\n","rain_1h                 3703\n","snow_1h                 3830\n","clouds_all              3904\n","weather_main            3909\n","weather_description     3812\n","date_time               3880\n","dtype: int64"]},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":["# 1. Displaying the first 10 records\n","# 1. Displaying the first 10 records\n","# 2. Check dataset info - field types, non-null values, dtypes\n","# df.shape\n","# df.columns\n","# df.dtypes\n","# df.describe()\n","df.info()\n","# df.nunique()\n","# df['weather_description'].unique()\n","# df.tail(5)\n","df.isnull().sum()"]},{"cell_type":"code","execution_count":17,"id":"0f0680d0","metadata":{"execution":{"iopub.execute_input":"2024-04-12T16:08:18.594674Z","iopub.status.busy":"2024-04-12T16:08:18.594222Z","iopub.status.idle":"2024-04-12T16:08:18.825399Z","shell.execute_reply":"2024-04-12T16:08:18.824212Z","shell.execute_reply.started":"2024-04-12T16:08:18.594642Z"},"papermill":{"duration":0.139927,"end_time":"2024-04-12T14:15:59.113470","exception":false,"start_time":"2024-04-12T14:15:58.973543","status":"completed"},"tags":[],"trusted":true},"outputs":[],"source":["df['date_time'] = pd.to_datetime(df['date_time'], format='%d-%m-%Y %H:%M')\n","df['date_month_no']= df['date_time'].dt.month\n","df['date_day']= df['date_time'].dt.day\n","df['date_hour']= df['date_time'].dt.hour\n","df['weekday'] = df['date_time'].dt.weekday\n","df['is_weekend'] = df['date_time'].dt.dayofweek // 5\n","df['hour_sin'] = np.sin(2 * np.pi * df['date_hour'] / 24)\n","df['hour_cos'] = np.cos(2 * np.pi * df['date_hour'] / 24)\n","df['weekday_sin'] = np.sin(2 * np.pi * df['weekday'] / 7)\n","df['weekday_cos'] = np.cos(2 * np.pi * df['weekday'] / 7)\n","df['date_day_sin'] = np.sin(2 * np.pi * df['date_day'] / 31)\n","df['date_day_cos'] = np.cos(2 * np.pi * df['date_day'] / 31)\n","df['day_of_year'] = df['date_time'].dt.dayofyear\n","df['day_of_year_sin'] = np.sin(2 * np.pi * df['day_of_year'] / 365.25)\n","df['day_of_year_cos'] = np.cos(2 * np.pi * df['day_of_year'] / 365.25)"]},{"cell_type":"code","execution_count":5,"id":"2f402c43","metadata":{"execution":{"iopub.execute_input":"2024-04-12T14:15:59.128610Z","iopub.status.busy":"2024-04-12T14:15:59.128193Z","iopub.status.idle":"2024-04-12T14:15:59.133324Z","shell.execute_reply":"2024-04-12T14:15:59.132101Z"},"papermill":{"duration":0.015267,"end_time":"2024-04-12T14:15:59.135499","exception":false,"start_time":"2024-04-12T14:15:59.120232","status":"completed"},"tags":[]},"outputs":[],"source":["# 2. Check dataset info - field types, non-null values, dtypes"]},{"cell_type":"code","execution_count":18,"id":"96705b59","metadata":{"execution":{"iopub.execute_input":"2024-04-12T16:08:53.459918Z","iopub.status.busy":"2024-04-12T16:08:53.459445Z","iopub.status.idle":"2024-04-12T16:08:53.502366Z","shell.execute_reply":"2024-04-12T16:08:53.501025Z","shell.execute_reply.started":"2024-04-12T16:08:53.459882Z"},"papermill":{"duration":0.044447,"end_time":"2024-04-12T14:15:59.186724","exception":false,"start_time":"2024-04-12T14:15:59.142277","status":"completed"},"tags":[],"trusted":true},"outputs":[],"source":["# 3a. Pre-processing (Cleaning): Address missing (NULL) values - drop or imputation\n","values = {\n","    'temp': df['temp'].mean(),\n","    'rain_1h': df['rain_1h'].interpolate(method='linear'),\n","    'snow_1h': df['snow_1h'].interpolate(method='linear'),\n","    'clouds_all': df['clouds_all'].mean()\n","\n","\n","}\n","df.fillna(value=values, inplace=True)\n","df.dropna(subset= ['traffic_volume','weather_main','weather_description','date_time'], inplace=True)"]},{"cell_type":"code","execution_count":19,"id":"e9ca18cd","metadata":{"execution":{"iopub.execute_input":"2024-04-12T16:08:59.034133Z","iopub.status.busy":"2024-04-12T16:08:59.033663Z","iopub.status.idle":"2024-04-12T16:08:59.043329Z","shell.execute_reply":"2024-04-12T16:08:59.041886Z","shell.execute_reply.started":"2024-04-12T16:08:59.034100Z"},"papermill":{"duration":0.018587,"end_time":"2024-04-12T14:15:59.251790","exception":false,"start_time":"2024-04-12T14:15:59.233203","status":"completed"},"tags":[],"trusted":true},"outputs":[],"source":["# 3c. Pre-processing (Cleaning): Drop irrelevant columns (that you don't want to give as input to the model)\n","df = df.drop(columns=[\"holiday\",\"date_time\"])"]},{"cell_type":"code","execution_count":20,"id":"6e0bcc7f","metadata":{"execution":{"iopub.execute_input":"2024-04-12T16:09:07.644698Z","iopub.status.busy":"2024-04-12T16:09:07.644168Z","iopub.status.idle":"2024-04-12T16:09:07.678828Z","shell.execute_reply":"2024-04-12T16:09:07.677845Z","shell.execute_reply.started":"2024-04-12T16:09:07.644661Z"},"papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[],"trusted":true},"outputs":[],"source":["# 3d. Pre-processing (Encoding): Convert categorical values to numeric\n","# Use df['col_name'].value_counts() to find out all the categories available per column\n","\n","# df['col_name'].value_counts()\n","\n","df = pd.get_dummies(df, columns=['weather_main','weather_description']).astype(float) "]},{"cell_type":"code","execution_count":21,"id":"32aefe5f","metadata":{"execution":{"iopub.execute_input":"2024-04-12T16:09:14.969867Z","iopub.status.busy":"2024-04-12T16:09:14.969175Z","iopub.status.idle":"2024-04-12T16:09:14.983610Z","shell.execute_reply":"2024-04-12T16:09:14.982617Z","shell.execute_reply.started":"2024-04-12T16:09:14.969833Z"},"papermill":{"duration":2.071191,"end_time":"2024-04-12T14:16:01.329681","exception":true,"start_time":"2024-04-12T14:15:59.258490","status":"failed"},"tags":[],"trusted":true},"outputs":[],"source":["# in order to match hotcoding with test data i am manually deleting those unavailable in test data\n","# df = df.drop(columns=[\"holiday\",\"date_time\"])\n","df= df.drop(columns=[\"weather_description_light rain and snow\",\"weather_description_shower snow\",\"weather_description_thunderstorm with drizzle\",\"weather_description_sleet\"])"]},{"cell_type":"code","execution_count":22,"id":"00451974","metadata":{"execution":{"iopub.execute_input":"2024-04-12T16:09:37.079954Z","iopub.status.busy":"2024-04-12T16:09:37.079484Z","iopub.status.idle":"2024-04-12T16:09:37.153788Z","shell.execute_reply":"2024-04-12T16:09:37.152554Z","shell.execute_reply.started":"2024-04-12T16:09:37.079918Z"},"papermill":{"duration":0.033036,"end_time":"2024-04-12T14:15:59.226445","exception":false,"start_time":"2024-04-12T14:15:59.193409","status":"completed"},"tags":[],"trusted":true},"outputs":[],"source":["# 3b. Pre-processing (Cleaning): Remove Duplicate Rows\n","df.drop_duplicates(inplace=True)"]},{"cell_type":"code","execution_count":23,"id":"18c25f64","metadata":{"papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 25327 entries, 3 to 38562\n","Data columns (total 64 columns):\n"," #   Column                                                   Non-Null Count  Dtype  \n","---  ------                                                   --------------  -----  \n"," 0   traffic_volume                                           25327 non-null  float64\n"," 1   temp                                                     25327 non-null  float64\n"," 2   rain_1h                                                  25327 non-null  float64\n"," 3   snow_1h                                                  25327 non-null  float64\n"," 4   clouds_all                                               25327 non-null  float64\n"," 5   date_month_no                                            25327 non-null  float64\n"," 6   date_day                                                 25327 non-null  float64\n"," 7   date_hour                                                25327 non-null  float64\n"," 8   weekday                                                  25327 non-null  float64\n"," 9   is_weekend                                               25327 non-null  float64\n"," 10  hour_sin                                                 25327 non-null  float64\n"," 11  hour_cos                                                 25327 non-null  float64\n"," 12  weekday_sin                                              25327 non-null  float64\n"," 13  weekday_cos                                              25327 non-null  float64\n"," 14  date_day_sin                                             25327 non-null  float64\n"," 15  date_day_cos                                             25327 non-null  float64\n"," 16  day_of_year                                              25327 non-null  float64\n"," 17  day_of_year_sin                                          25327 non-null  float64\n"," 18  day_of_year_cos                                          25327 non-null  float64\n"," 19  weather_main_Clear                                       25327 non-null  float64\n"," 20  weather_main_Clouds                                      25327 non-null  float64\n"," 21  weather_main_Drizzle                                     25327 non-null  float64\n"," 22  weather_main_Fog                                         25327 non-null  float64\n"," 23  weather_main_Haze                                        25327 non-null  float64\n"," 24  weather_main_Mist                                        25327 non-null  float64\n"," 25  weather_main_Rain                                        25327 non-null  float64\n"," 26  weather_main_Smoke                                       25327 non-null  float64\n"," 27  weather_main_Snow                                        25327 non-null  float64\n"," 28  weather_main_Squall                                      25327 non-null  float64\n"," 29  weather_main_Thunderstorm                                25327 non-null  float64\n"," 30  weather_description_SQUALLS                              25327 non-null  float64\n"," 31  weather_description_Sky is Clear                         25327 non-null  float64\n"," 32  weather_description_broken clouds                        25327 non-null  float64\n"," 33  weather_description_drizzle                              25327 non-null  float64\n"," 34  weather_description_few clouds                           25327 non-null  float64\n"," 35  weather_description_fog                                  25327 non-null  float64\n"," 36  weather_description_freezing rain                        25327 non-null  float64\n"," 37  weather_description_haze                                 25327 non-null  float64\n"," 38  weather_description_heavy intensity drizzle              25327 non-null  float64\n"," 39  weather_description_heavy intensity rain                 25327 non-null  float64\n"," 40  weather_description_heavy snow                           25327 non-null  float64\n"," 41  weather_description_light intensity drizzle              25327 non-null  float64\n"," 42  weather_description_light intensity shower rain          25327 non-null  float64\n"," 43  weather_description_light rain                           25327 non-null  float64\n"," 44  weather_description_light shower snow                    25327 non-null  float64\n"," 45  weather_description_light snow                           25327 non-null  float64\n"," 46  weather_description_mist                                 25327 non-null  float64\n"," 47  weather_description_moderate rain                        25327 non-null  float64\n"," 48  weather_description_overcast clouds                      25327 non-null  float64\n"," 49  weather_description_proximity shower rain                25327 non-null  float64\n"," 50  weather_description_proximity thunderstorm               25327 non-null  float64\n"," 51  weather_description_proximity thunderstorm with drizzle  25327 non-null  float64\n"," 52  weather_description_proximity thunderstorm with rain     25327 non-null  float64\n"," 53  weather_description_scattered clouds                     25327 non-null  float64\n"," 54  weather_description_shower drizzle                       25327 non-null  float64\n"," 55  weather_description_sky is clear                         25327 non-null  float64\n"," 56  weather_description_smoke                                25327 non-null  float64\n"," 57  weather_description_snow                                 25327 non-null  float64\n"," 58  weather_description_thunderstorm                         25327 non-null  float64\n"," 59  weather_description_thunderstorm with heavy rain         25327 non-null  float64\n"," 60  weather_description_thunderstorm with light drizzle      25327 non-null  float64\n"," 61  weather_description_thunderstorm with light rain         25327 non-null  float64\n"," 62  weather_description_thunderstorm with rain               25327 non-null  float64\n"," 63  weather_description_very heavy rain                      25327 non-null  float64\n","dtypes: float64(64)\n","memory usage: 12.6 MB\n"]},{"data":{"text/plain":["traffic_volume                                         0\n","temp                                                   0\n","rain_1h                                                0\n","snow_1h                                                0\n","clouds_all                                             0\n","                                                      ..\n","weather_description_thunderstorm with heavy rain       0\n","weather_description_thunderstorm with light drizzle    0\n","weather_description_thunderstorm with light rain       0\n","weather_description_thunderstorm with rain             0\n","weather_description_very heavy rain                    0\n","Length: 64, dtype: int64"]},"execution_count":23,"metadata":{},"output_type":"execute_result"}],"source":["# 4a. Data understanding - Find out stats regarding your data (df.describe(), df.mean(), df.median())\n","df.info()\n","df.isnull().sum()"]},{"cell_type":"code","execution_count":null,"id":"c0593665","metadata":{"papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[]},"outputs":[],"source":["# 4b. Data understanding - Make use of plots to build more understanding of the data\n","# Hint: Can use df.plot()\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Calculate correlation matrix\n","corr = df[features + ['traffic_volume']].corr()\n","\n","# Plot heatmap\n","plt.figure(figsize=(10, 8))\n","sns.heatmap(corr, annot=True, fmt=\".2f\", cmap='coolwarm')\n","plt.title('Correlation Heatmap')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"14ee453f","metadata":{},"outputs":[],"source":["sns.pairplot(df[features + ['traffic_volume']])\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"f6e2d7b4","metadata":{},"outputs":[],"source":["from sklearn.ensemble import RandomForestRegressor\n","\n","# Assuming you have already trained a RandomForestRegressor model named 'rf'\n","feature_importances = selector.feature_importances_\n","sorted_idx = np.argsort(feature_importances)\n","\n","plt.figure(figsize=(16, 7))\n","plt.barh(range(len(selected_features_names)), feature_importances[selected_features_names], align='center')\n","plt.yticks(range(len(selected_features_names)), np.array(features)[selected_features_names])\n","plt.title('Feature Importances')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"1409902b","metadata":{"papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[]},"outputs":[],"source":["# 4b. (Optional) Create More plots to understand the relationship b/w different variables\n","\n","# Example: Top 20 actors of movies based on the imdb rating of the movies\n","\n","# plt.figure(figsize=(10, 8))\n","\n","# # Create a new dataframe with top 20 values\n","# new_df = df.sort_values(by ='imdb_score' , ascending=False)\n","# new_df = new_df.head(20)\n","\n","# # plotting\n","# ax=sns.pointplot(x=new_df['actor_1_name'], y=new_df['imdb_score'], hue=new_df['movie_title'])\n","# ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\n","# plt.tight_layout()\n","# plt.show()"]},{"cell_type":"code","execution_count":null,"id":"bf6932f4","metadata":{"papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[]},"outputs":[],"source":["# 4c. Find out which input features are the most important\n","# Hint: Start out with df.corr(). Can visualise with seaborn library"]},{"cell_type":"code","execution_count":null,"id":"e9b8ec8b","metadata":{"papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[]},"outputs":[],"source":["# Any other relevant pre-processing (upto your exploration)"]},{"cell_type":"markdown","metadata":{"papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[]},"source":["### Model Development"]},{"cell_type":"code","execution_count":24,"id":"ccd7d202","metadata":{"execution":{"iopub.execute_input":"2024-04-12T16:09:49.211905Z","iopub.status.busy":"2024-04-12T16:09:49.211462Z","iopub.status.idle":"2024-04-12T16:09:49.228404Z","shell.execute_reply":"2024-04-12T16:09:49.226796Z","shell.execute_reply.started":"2024-04-12T16:09:49.211870Z"},"papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[],"trusted":true},"outputs":[],"source":["# 1. Divide dataframe into input and output\n","# X = df.drop(columns=['output_class']) -> Drop the column to be predicted\n","# y = df['output_class'] -> Choose Output column to be predicted\n","x = df[[ 'temp', 'rain_1h', 'snow_1h', 'clouds_all', 'weather_main_Clear',\n","       'weather_main_Clouds', 'weather_main_Drizzle', 'weather_main_Fog',\n","       'weather_main_Haze', 'weather_main_Mist', 'weather_main_Rain',\n","       'weather_main_Smoke', 'weather_main_Snow', 'weather_main_Squall',\n","       'weather_main_Thunderstorm', 'weather_description_SQUALLS',\n","       'weather_description_Sky is Clear', 'weather_description_broken clouds',\n","       'weather_description_drizzle', 'weather_description_few clouds',\n","       'weather_description_fog', 'weather_description_freezing rain',\n","       'weather_description_haze',\n","       'weather_description_heavy intensity drizzle',\n","       'weather_description_heavy intensity rain',\n","       'weather_description_heavy snow',\n","       'weather_description_light intensity drizzle',\n","       'weather_description_light intensity shower rain',\n","       'weather_description_light rain',\n","       'weather_description_light shower snow',\n","       'weather_description_light snow', 'weather_description_mist',\n","       'weather_description_moderate rain',\n","       'weather_description_overcast clouds',\n","       'weather_description_proximity shower rain',\n","       'weather_description_proximity thunderstorm',\n","       'weather_description_proximity thunderstorm with drizzle',\n","       'weather_description_proximity thunderstorm with rain',\n","       'weather_description_scattered clouds',\n","       'weather_description_shower drizzle',\n","       'weather_description_sky is clear', 'weather_description_smoke',\n","       'weather_description_snow', 'weather_description_thunderstorm',\n","       'weather_description_thunderstorm with heavy rain',\n","       'weather_description_thunderstorm with light drizzle',\n","       'weather_description_thunderstorm with light rain',\n","       'weather_description_thunderstorm with rain',\n","       'weather_description_very heavy rain','date_month_no','date_hour',\n","       'date_day','weekday','is_weekend','hour_sin','hour_cos','weekday_sin','weekday_cos',\n","       'day_of_year_sin','day_of_year_cos','day_of_year']]\n","y = df['traffic_volume']\n","feature_names = x.columns\n","\n"]},{"cell_type":"code","execution_count":51,"id":"8eed0ae7","metadata":{"execution":{"iopub.execute_input":"2024-04-12T16:23:42.860546Z","iopub.status.busy":"2024-04-12T16:23:42.858930Z","iopub.status.idle":"2024-04-12T16:24:00.733135Z","shell.execute_reply":"2024-04-12T16:24:00.732207Z","shell.execute_reply.started":"2024-04-12T16:23:42.860485Z"},"papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[],"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["R^2 Score: 0.9730103732869331\n","Mean Squared Error: 104376.23967654924\n"]}],"source":["from xgboost import XGBRegressor\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import r2_score, mean_squared_error\n","from sklearn.ensemble import RandomForestRegressor\n","\n","# Feature Selection with Random Forest\n","selector = RandomForestRegressor(n_estimators=100, random_state=42)\n","selector.fit(x, y)\n","\n","# Get feature importances\n","feature_importances = selector.feature_importances_\n","\n","# Get indices of the top 6 features\n","selected_features_indices = (-feature_importances).argsort()[:10]\n","\n","# Create a new DataFrame with only the selected features\n","x_new = x.iloc[:, selected_features_indices]\n","\n","# Get the names of the selected features\n","selected_features_names = x.columns[selected_features_indices]\n","\n","# Split the data into training and testing sets\n","x_train, x_test, y_train, y_test = train_test_split(x_new, y, test_size=0.2)\n","\n","# Train the XGBoost Regressor model\n","model = XGBRegressor()\n","model.fit(x_train, y_train)\n","\n","# Make predictions\n","y_pred = model.predict(x_test)\n","\n","# Evaluate the model\n","print('R^2 Score:', r2_score(y_test, y_pred))\n","print('Mean Squared Error:', mean_squared_error(y_test, y_pred))\n"]},{"cell_type":"code","execution_count":52,"id":"7da8db0d","metadata":{},"outputs":[],"source":["from sklearn.model_selection import GridSearchCV\n","from xgboost import XGBRegressor\n","\n","# Assuming x_train, y_train are your training data and labels\n","\n","# Hyperparameter tuning\n","parameters = {\n","    'max_depth': [3, 5, 7, 9],\n","    'n_estimators': [50, 100, 200],\n","    'learning_rate': [0.01, 0.05, 0.1]\n","}\n","\n","xgb = XGBRegressor()\n","clf = GridSearchCV(xgb, parameters, scoring='neg_mean_squared_error')\n","clf.fit(x_train, y_train)\n","\n","# Use the best parameters for the model\n","model = clf.best_estimator_\n","\n","# Optionally, re-evaluate feature importance and select top features\n","# model.fit(x_train[selected_features], y_train)\n","# predictions = model.predict(x_test[selected_features])\n","\n","# Evaluate the model"]},{"cell_type":"code","execution_count":53,"id":"e0f7368c","metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["Mean Squared Error: 95927.66244425617\n"]}],"source":["# Assuming 'model' is your updated model after hyperparameter tuning or feature selection\n","model.fit(x_train, y_train)  # Retrain the model with the training data\n","\n","y_pred = model.predict(x_test)  # Make predictions on the test data\n","\n","# Calculate the Mean Squared Error to evaluate the model\n","from sklearn.metrics import mean_squared_error\n","mse = mean_squared_error(y_test, y_pred)\n","print('Mean Squared Error:', mse)"]},{"cell_type":"code","execution_count":59,"id":"a481fff8","metadata":{},"outputs":[{"data":{"text/plain":["Index(['hour_cos', 'date_hour', 'hour_sin', 'is_weekend', 'weekday_sin',\n","       'weekday', 'day_of_year_cos', 'day_of_year_sin', 'temp', 'day_of_year'],\n","      dtype='object')"]},"execution_count":59,"metadata":{},"output_type":"execute_result"}],"source":["selected_features_names\n","\n"]},{"cell_type":"code","execution_count":null,"id":"5afee418","metadata":{"papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[]},"outputs":[],"source":["# 3. Data Normalisation: Bring into the range 0 to 1, or -1 to 1"]},{"cell_type":"code","execution_count":null,"id":"c6191725","metadata":{"id":"kNFBi9jyk90_","papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[]},"outputs":[],"source":["# 4. Choose Model(s), fit\n","### Experiment with different models.\n","### https://scikit-learn.org/stable/supervised_learning.html\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Assuming 'df' is your DataFrame and it contains both the features and the target variable\n","features = ['hour_cos', 'date_hour', 'hour_sin', 'is_weekend', 'weekday_sin',\n","            'weekday', 'day_of_year_cos', 'day_of_year_sin', 'temp', 'day_of_year']\n","target = 'traffic_volume'\n","\n","# Set the size of the plots\n","plt.figure(figsize=(20, 15))\n","\n","for i, feature in enumerate(features, 1):\n","    plt.subplot(5, 2, i)  # Adjust the grid size according to the number of features\n","    sns.scatterplot(x=df[feature], y=df[target])\n","    plt.title(f'{feature} vs. {target}')\n","    plt.xlabel(feature)\n","    plt.ylabel(target)\n","\n","plt.tight_layout()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"5fe3012a","metadata":{},"outputs":[],"source":["pip install matplotlib seaborn"]},{"cell_type":"code","execution_count":null,"id":"fd0ccc44","metadata":{},"outputs":[],"source":["plt.figure(figsize=(20, 15))\n","for i, feature in enumerate(features, 1):\n","    plt.subplot(5, 2, i)\n","    # Sorting values for better line plot visualization\n","    sorted_df = df.sort_values(by=feature)\n","    plt.plot(sorted_df[feature], sorted_df[target], marker='o', linestyle='-', markersize=4)\n","    plt.title(f'{feature} vs. {target}')\n","    plt.xlabel(feature)\n","    plt.ylabel(target)\n","plt.tight_layout()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"6c67e8e7","metadata":{},"outputs":[],"source":["plt.figure(figsize=(20, 15))\n","for i, feature in enumerate(features, 1):\n","    plt.subplot(5, 2, i)\n","    sns.boxplot(x=df[feature], y=df[target])\n","    plt.title(f'{feature} vs. {target}')\n","    plt.xlabel(feature)\n","    plt.ylabel(target)\n","plt.tight_layout()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"d3cdf7b3","metadata":{},"outputs":[],"source":["plt.figure(figsize=(20, 15))\n","for i, feature in enumerate(features, 1):\n","    plt.subplot(5, 2, i)\n","    sns.violinplot(x=df[feature], y=df[target])\n","    plt.title(f'{feature} vs. {target}')\n","    plt.xlabel(feature)\n","    plt.ylabel(target)\n","plt.tight_layout()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"41ed46c6","metadata":{},"outputs":[],"source":["plt.figure(figsize=(20, 15))\n","for i, feature in enumerate(features, 1):\n","    plt.subplot(5, 2, i)\n","    plt.hist(df[feature], bins=20, alpha=0.7)\n","    plt.title(f'Distribution of {feature}')\n","    plt.xlabel(feature)\n","    plt.ylabel('Frequency')\n","plt.tight_layout()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"14c1cc5a","metadata":{"id":"2HzvdnG0mWEZ","papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[]},"outputs":[],"source":["# 5. Evaluate with relevant metric for your problem. Eg: accuracy_score(), r2_score()"]},{"cell_type":"code","execution_count":null,"id":"8fcae679","metadata":{"papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[]},"outputs":[],"source":["# 6. After model choice is made, fine-tune with GridSearchCV, or RandomizedSearchCV()"]},{"cell_type":"markdown","metadata":{"id":"7Zb-W-KzvyzX","papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[]},"source":["### Testing and Creating Output CSV"]},{"cell_type":"code","execution_count":55,"id":"718f2dbf","metadata":{"execution":{"iopub.execute_input":"2024-04-12T16:25:34.904190Z","iopub.status.busy":"2024-04-12T16:25:34.903661Z","iopub.status.idle":"2024-04-12T16:25:35.036457Z","shell.execute_reply":"2024-04-12T16:25:35.034862Z","shell.execute_reply.started":"2024-04-12T16:25:34.904154Z"},"id":"X833FyDYv0IY","papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[],"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 9641 entries, 0 to 9640\n","Data columns (total 22 columns):\n"," #   Column               Non-Null Count  Dtype         \n","---  ------               --------------  -----         \n"," 0   holiday              16 non-null     object        \n"," 1   temp                 9641 non-null   float64       \n"," 2   rain_1h              9641 non-null   float64       \n"," 3   snow_1h              9641 non-null   float64       \n"," 4   clouds_all           9641 non-null   int64         \n"," 5   weather_main         9641 non-null   object        \n"," 6   weather_description  9641 non-null   object        \n"," 7   date_time            9641 non-null   datetime64[ns]\n"," 8   date_month_no        9641 non-null   int32         \n"," 9   date_day             9641 non-null   int32         \n"," 10  date_hour            9641 non-null   int32         \n"," 11  weekday              9641 non-null   int32         \n"," 12  is_weekend           9641 non-null   int32         \n"," 13  hour_sin             9641 non-null   float64       \n"," 14  hour_cos             9641 non-null   float64       \n"," 15  weekday_sin          9641 non-null   float64       \n"," 16  weekday_cos          9641 non-null   float64       \n"," 17  date_day_sin         9641 non-null   float64       \n"," 18  date_day_cos         9641 non-null   float64       \n"," 19  day_of_year          9641 non-null   int32         \n"," 20  day_of_year_sin      9641 non-null   float64       \n"," 21  day_of_year_cos      9641 non-null   float64       \n","dtypes: datetime64[ns](1), float64(11), int32(6), int64(1), object(3)\n","memory usage: 1.4+ MB\n"]}],"source":["# Creating output file for submission - Template Code\n","\n","test_pd = pd.read_csv(\"C:/Users/kvsvy/Downloads/traffic volume data/test_set_nogt.csv\")\n","\n","# saving in a new variable to modify\n","test = test_pd.copy(deep=True)\n","\n","test['date_time'] = pd.to_datetime(test['date_time'], format='%d-%m-%Y %H:%M')\n","test['date_month_no']= test['date_time'].dt.month\n","test['date_day']= test['date_time'].dt.day\n","test['date_hour']= test['date_time'].dt.hour\n","test['weekday'] = test['date_time'].dt.weekday\n","test['is_weekend'] = test['date_time'].dt.dayofweek // 5\n","test['hour_sin'] = np.sin(2 * np.pi * test['date_hour'] / 24)\n","test['hour_cos'] = np.cos(2 * np.pi * test['date_hour'] / 24)\n","test['weekday_sin'] = np.sin(2 * np.pi * test['weekday'] / 7)\n","test['weekday_cos'] = np.cos(2 * np.pi * test['weekday'] / 7)\n","test['date_day_sin'] = np.sin(2 * np.pi * test['date_day'] / 31)\n","test['date_day_cos'] = np.cos(2 * np.pi * test['date_day'] / 31)\n","test['day_of_year'] = test['date_time'].dt.dayofyear\n","test['day_of_year_sin'] = np.sin(2 * np.pi * test['day_of_year'] / 365.25)\n","test['day_of_year_cos'] = np.cos(2 * np.pi * test['day_of_year'] / 365.25)\n","test.info()\n","\n"]},{"cell_type":"code","execution_count":56,"id":"e64694be","metadata":{"execution":{"iopub.execute_input":"2024-04-12T16:25:50.374096Z","iopub.status.busy":"2024-04-12T16:25:50.373683Z","iopub.status.idle":"2024-04-12T16:25:50.405128Z","shell.execute_reply":"2024-04-12T16:25:50.403578Z","shell.execute_reply.started":"2024-04-12T16:25:50.374066Z"},"papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[],"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 9641 entries, 0 to 9640\n","Data columns (total 63 columns):\n"," #   Column                                                   Non-Null Count  Dtype  \n","---  ------                                                   --------------  -----  \n"," 0   temp                                                     9641 non-null   float64\n"," 1   rain_1h                                                  9641 non-null   float64\n"," 2   snow_1h                                                  9641 non-null   float64\n"," 3   clouds_all                                               9641 non-null   float64\n"," 4   date_month_no                                            9641 non-null   float64\n"," 5   date_day                                                 9641 non-null   float64\n"," 6   date_hour                                                9641 non-null   float64\n"," 7   weekday                                                  9641 non-null   float64\n"," 8   is_weekend                                               9641 non-null   float64\n"," 9   hour_sin                                                 9641 non-null   float64\n"," 10  hour_cos                                                 9641 non-null   float64\n"," 11  weekday_sin                                              9641 non-null   float64\n"," 12  weekday_cos                                              9641 non-null   float64\n"," 13  date_day_sin                                             9641 non-null   float64\n"," 14  date_day_cos                                             9641 non-null   float64\n"," 15  day_of_year                                              9641 non-null   float64\n"," 16  day_of_year_sin                                          9641 non-null   float64\n"," 17  day_of_year_cos                                          9641 non-null   float64\n"," 18  weather_main_Clear                                       9641 non-null   float64\n"," 19  weather_main_Clouds                                      9641 non-null   float64\n"," 20  weather_main_Drizzle                                     9641 non-null   float64\n"," 21  weather_main_Fog                                         9641 non-null   float64\n"," 22  weather_main_Haze                                        9641 non-null   float64\n"," 23  weather_main_Mist                                        9641 non-null   float64\n"," 24  weather_main_Rain                                        9641 non-null   float64\n"," 25  weather_main_Smoke                                       9641 non-null   float64\n"," 26  weather_main_Snow                                        9641 non-null   float64\n"," 27  weather_main_Squall                                      9641 non-null   float64\n"," 28  weather_main_Thunderstorm                                9641 non-null   float64\n"," 29  weather_description_SQUALLS                              9641 non-null   float64\n"," 30  weather_description_Sky is Clear                         9641 non-null   float64\n"," 31  weather_description_broken clouds                        9641 non-null   float64\n"," 32  weather_description_drizzle                              9641 non-null   float64\n"," 33  weather_description_few clouds                           9641 non-null   float64\n"," 34  weather_description_fog                                  9641 non-null   float64\n"," 35  weather_description_freezing rain                        9641 non-null   float64\n"," 36  weather_description_haze                                 9641 non-null   float64\n"," 37  weather_description_heavy intensity drizzle              9641 non-null   float64\n"," 38  weather_description_heavy intensity rain                 9641 non-null   float64\n"," 39  weather_description_heavy snow                           9641 non-null   float64\n"," 40  weather_description_light intensity drizzle              9641 non-null   float64\n"," 41  weather_description_light intensity shower rain          9641 non-null   float64\n"," 42  weather_description_light rain                           9641 non-null   float64\n"," 43  weather_description_light shower snow                    9641 non-null   float64\n"," 44  weather_description_light snow                           9641 non-null   float64\n"," 45  weather_description_mist                                 9641 non-null   float64\n"," 46  weather_description_moderate rain                        9641 non-null   float64\n"," 47  weather_description_overcast clouds                      9641 non-null   float64\n"," 48  weather_description_proximity shower rain                9641 non-null   float64\n"," 49  weather_description_proximity thunderstorm               9641 non-null   float64\n"," 50  weather_description_proximity thunderstorm with drizzle  9641 non-null   float64\n"," 51  weather_description_proximity thunderstorm with rain     9641 non-null   float64\n"," 52  weather_description_scattered clouds                     9641 non-null   float64\n"," 53  weather_description_shower drizzle                       9641 non-null   float64\n"," 54  weather_description_sky is clear                         9641 non-null   float64\n"," 55  weather_description_smoke                                9641 non-null   float64\n"," 56  weather_description_snow                                 9641 non-null   float64\n"," 57  weather_description_thunderstorm                         9641 non-null   float64\n"," 58  weather_description_thunderstorm with heavy rain         9641 non-null   float64\n"," 59  weather_description_thunderstorm with light drizzle      9641 non-null   float64\n"," 60  weather_description_thunderstorm with light rain         9641 non-null   float64\n"," 61  weather_description_thunderstorm with rain               9641 non-null   float64\n"," 62  weather_description_very heavy rain                      9641 non-null   float64\n","dtypes: float64(63)\n","memory usage: 4.6 MB\n"]}],"source":["test = test.drop(columns=[\"holiday\",\"date_time\"])\n","test = pd.get_dummies(test, columns=['weather_main','weather_description']).astype(float) \n","test.info()"]},{"cell_type":"code","execution_count":57,"id":"f65596f2","metadata":{"execution":{"iopub.execute_input":"2024-04-12T16:26:31.495046Z","iopub.status.busy":"2024-04-12T16:26:31.494616Z","iopub.status.idle":"2024-04-12T16:26:31.555449Z","shell.execute_reply":"2024-04-12T16:26:31.553326Z","shell.execute_reply.started":"2024-04-12T16:26:31.495014Z"},"papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[],"trusted":true},"outputs":[],"source":["\n","# # Prepare data to be given as an input to your trained model\n","# # 1. Repeat the pre-processing done above. Eg: Conversion to categorical, filling in mean values\n","# test['bmi'].fillna(test['bmi'].mean(), inplace=True)\n","# test = pd.get_dummies(test)\n","\n","# 2. Use the same features obtained in feature selection\n","# chosen_features = feat_selector.get_feature_names_out() # from above -> getting names of chosen features\n","test = test[selected_features_names]\n","\n","# 3. Normalise/Scale the features as done above\n","\n","\n","# 4. Predict and obtain results from the model\n","y_pred = model.predict(test)\n","\n","# 5. Save results to CSV\n","submission = pd.DataFrame({'ID': test.index, 'traffic_volume' : y_pred})\n","# submission.to_csv('submissionpost.csv', index=False)\n","submission.to_csv('C:/Users/kvsvy/Downloads/submissionpostfinal.csv', index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xRKZLwnaoFQf","papermill":{"duration":null,"end_time":null,"exception":null,"start_time":null,"status":"pending"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[]},"kaggle":{"accelerator":"none","dataSources":[{"databundleVersionId":8151114,"sourceId":74696,"sourceType":"competition"}],"dockerImageVersionId":30684,"isGpuEnabled":false,"isInternetEnabled":false,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.12.2"},"papermill":{"default_parameters":{},"duration":8.486969,"end_time":"2024-04-12T14:16:02.260018","environment_variables":{},"exception":true,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-04-12T14:15:53.773049","version":"2.5.0"}},"nbformat":4,"nbformat_minor":5}
